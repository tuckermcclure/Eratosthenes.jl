sim:
  dt: 0.02 # Timestep for RK4 for continuous-time states (s)
  t_end: 60. # End time of simulation (it starts at 0) (s)
  seed: 1 # Seed for top-level random number generator
  date_0: [2017, 10, 25, 21, 14, 21.] # Simulation start date (UT1)
  log_file: out/reaction-wheel.h5
environment:
  model: LowEarthOrbit # Includes gravity, magnetic field, air density (or should environments be plural, and _each_ of these is a model?)
vehicles:
  - model: Vehicle # Generic rigid body with inertial state
    name: cube1
    body: # No need to specify the model; the default body will do for us.
      constants:
        m: 55. # Mass of the body (kg); components can have their own masses via Mass effects
        I_B: [[5., 0., 0.],
              [0., 5., 0.],
              [0., 0., 5.]] # Central mass moment of inertia of the body (kg m^2)
      state: # state: (OrbitalElements(...), AttitudeType.LVLH())
        r_be_I: "[6378137.+350000., 0., 0.]" # Position of reference point b wrt COM of Earth in ICRF (m)
        v_be_I: "7600. * [0; cos(pi/4); sin(pi/4)]" # Rate of change of above (m/s)
        q_BI:   "normalize([0.; 0.; 1.; 0.5])" # Orientation of body wrt ICRF
        Ï‰_BI_B: [0., 0., 0.] # Rotation rate of body wrt ICRF, expressed in body (rad/s)
    components: # Low-level stuff, like sensors and actuators; these run "before" software on common timesteps.
      - model: Gyro # Generic gyro; uses finite difference of q_BI as average rate
        name: gyro
        timing: { dt: 0.05 }
      - model: StarTracker # Generic star tracker; measures q_BI
        name: star_tracker
        timing: { dt: 0.1 }
      - model: ReactionWheel
        name: rw1
        constants:
          rotation_axis: [1., 0., 0.]
        timing: { dt: 0.05 }
      - model: ReactionWheel
        name: rw2
        constants:
          rotation_axis: [0., 1., 0.]
        timing: { dt: 0.05 }
      - model: ReactionWheel
        name: rw3
        constants:
          rotation_axis: [0., 0., 1.]
        timing: { dt: 0.05 }
    computers: # These are more sophisticated and can run multiple processes at various rates.
      - model: Computer # Generic flight computer; just runs its processes
        software:
          - model: ReactionWheelController
            constants: [0., 1., 0., 0.] # Target orientation
            timing: { dt: 0.05 }
